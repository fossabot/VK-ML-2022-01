# basic workflow (github Actions)

name: CI (Continuous Integration)

on: push

jobs:
  check:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    steps:
      - uses: actions/checkout@v2
      - run: make check
  build:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    needs: [check]
    steps:
    - uses: actions/checkout@v2
    - run: make build
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        path: main.out
  test:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - run: make test
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: tests.out
  memtest:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - run: make memtest
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
            path: valgrind.log
  test_extra:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    needs: [memtest]
    steps:
      - uses: actions/checkout@v2
      - run: make testextra
  memtest_extra:
    runs-on: ubuntu-latest
    container: leshiy1295/gcc_linters_valgrind
    needs: [test_extra]
    steps:
      - uses: actions/checkout@v2
      - run: make memtestextra
      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
            path: valgrind.log

# This is a basic workflow to help you get started with Actions

# sudo systemctl run docker
  valgrind_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare environment
        run: sudo apt update && sudo apt install build-essential libgtest-dev cmake gcc valgrind
      - name: build
        run: cmake . -Bbuild && cmake --build build --target Tests
      - name: valgrind_memcheck
        run: valgrind --tool=memcheck --leak-check=yes --error-exitcode=1 ./build/Tests/Tests
  sanitaizer_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare environment
        run: sudo apt update && sudo apt install build-essential libgtest-dev cmake gcc valgrind
      - name: build
        run: cmake . -Bbuild -DBUILD_SANITIZERS=1 && cmake --build build --target Tests
      - name: sanitizer_memcheck
        run: ./build/Tests/Tests
  sanitaizer_thread_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare environment
        run: sudo apt update && sudo apt install build-essential libgtest-dev cmake gcc valgrind
      - name: build
        run: cmake . -Bbuild -DBUILD_SANITIZERS_THREAD=1 && cmake --build build --target Tests
      - name: thread_sanitizer_check
        run: ./build/Tests/Tests
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare environment
        run: sudo apt update && sudo apt install python3 python3-pip && pip3 install --user cpplint
      - name: lint
        run: ~/.local/bin/cpplint --recursive .
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: prepare environment
        run: sudo apt update && sudo apt install build-essential cmake gcc lcov libgtest-dev
      - name: build
        run: cmake . -Bbuild && cmake --build build --target Tests
      - name: test run
        run: ./build/Tests/Tests
      - name: codecov
        run: lcov -t "./build/Tests/Tests" -o coverage.info -c -d "./build/area_lib/CMakeFiles/area_lib.dir/" && genhtml -o report coverage.info
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: codecov-report
          path: ./report
  coverage_2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage1.xml,./coverage2.xml # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)